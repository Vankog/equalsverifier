package nl.jqno.equalsverifier.integration.extended_contract;

import java.util.Comparator;
import java.util.Objects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.jupiter.api.Test;

@SuppressWarnings("unused")
class SyntheticFieldsTest {

    @Test
    void succeed_whenClassHasASyntheticClassAsAField() {
        EqualsVerifier.forClass(LambdaContainer.class).verify();
    }

    @Test
    void succeed_whenClassHasASyntheticFieldBecauseItsInsideAUnitTestClass() {
        EqualsVerifier.forClass(Outer.class).verify();
    }

    @Test
    void succeed_whenClassHasASyntheticFieldBecauseItsAnInnerClass() {
        EqualsVerifier.forClass(Outer.Inner.class).verify();
    }

    @Test
    void succeed_whenClassHasAFieldThatHasASyntheticField() {
        EqualsVerifier.forClass(OuterContainer.class).verify();
    }

    @Test
    void succeed_whenClassIsInstrumentedByCobertura_givenCoberturaDoesntMarkItsFieldsSynthetic() {
        EqualsVerifier.forClass(CoberturaContainer.class).verify();
    }

    @Test
    void succeed_whenScalacOptionCheckinitIsEnabled_givenScalaDoesntMarkItsFieldsSynthetic() {
        EqualsVerifier.forClass(ScalaCheckinit.class).verify();
    }

    static final class LambdaContainer {

        private static final Comparator<LambdaContainer> COMPARATOR = (c1, c2) -> 0; // A lambda is a synthetic class

        private final String s;

        public LambdaContainer(String s) {
            this.s = s;
        }

        @Override
        public boolean equals(Object obj) {
            if (!(obj instanceof LambdaContainer)) {
                return false;
            }
            return Objects.equals(s, ((LambdaContainer) obj).s);
        }

        @Override
        public int hashCode() {
            return Objects.hash(s);
        }
    }

    @SuppressWarnings("ClassCanBeStatic")
    /* non-static */final class Outer {

        private final Inner inner;

        private /* non-static */final class Inner {

            private final int foo;

            private Inner(int foo) {
                this.foo = foo;
            }

            @Override
            public boolean equals(Object obj) {
                return obj instanceof Inner other && foo == other.foo;
            }

            @Override
            public int hashCode() {
                return Objects.hash(foo);
            }
        }

        public Outer() {
            inner = null;
        }

        @Override
        public boolean equals(Object obj) {
            return obj instanceof Outer other && Objects.equals(inner, other.inner);
        }

        @Override
        public int hashCode() {
            return Objects.hash(inner);
        }
    }

    @SuppressWarnings("ClassCanBeStatic")
    /* non-static */final class OuterContainer {

        private final Outer outer;

        public OuterContainer() {
            outer = null;
        }

        @Override
        public boolean equals(Object obj) {
            if (!(obj instanceof OuterContainer)) {
                return false;
            }
            OuterContainer other = (OuterContainer) obj;
            return Objects.equals(outer, other.outer);
        }

        @Override
        public int hashCode() {
            return Objects.hashCode(outer);
        }
    }

    public static final class CoberturaContainer {

        // CHECKSTYLE OFF: StaticVariableName
        public static transient int[] __cobertura_counters;
        // CHECKSTYLE ON: StaticVariableName
        private final int i;

        public CoberturaContainer(int i) {
            this.i = i;
        }

        static {
            __cobertura_counters = new int[1];
        }

        @Override
        public boolean equals(Object obj) {
            __cobertura_counters[0] += 1;
            if (!(obj instanceof CoberturaContainer)) {
                return false;
            }
            CoberturaContainer p = (CoberturaContainer) obj;
            return p.i == i;
        }

        @Override
        public int hashCode() {
            __cobertura_counters[0] += 1;
            return Objects.hash(i);
        }
    }

    public static final class ScalaCheckinit {

        // CHECKSTYLE OFF: MemberName
        // This field is generated by the Scala 2.x compiler when -Xcheckinit is switched on.
        // However, it's not marked as 'synthetic', so EqualsVerifier doesn't ignore it automatically.
        private volatile byte bitmap$init$0 = 0;
        // CHECKSTYLE ON: MemberName
        private final int i;

        public ScalaCheckinit(int i) {
            this.i = i;
        }

        @Override
        public boolean equals(Object obj) {
            if (!(obj instanceof ScalaCheckinit)) {
                return false;
            }
            ScalaCheckinit p = (ScalaCheckinit) obj;
            return p.i == i;
        }

        @Override
        public int hashCode() {
            return Objects.hash(i);
        }
    }
}
